//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MonitorApp.ScreenService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ScreenService.IScreenService")]
    public interface IScreenService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScreenService/TakeScreen", ReplyAction="http://tempuri.org/IScreenService/TakeScreenResponse")]
        void TakeScreen(byte[] screen, System.DateTime time, int mouseX, int mouseY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScreenService/TakeScreen", ReplyAction="http://tempuri.org/IScreenService/TakeScreenResponse")]
        System.Threading.Tasks.Task TakeScreenAsync(byte[] screen, System.DateTime time, int mouseX, int mouseY);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IScreenServiceChannel : MonitorApp.ScreenService.IScreenService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ScreenServiceClient : System.ServiceModel.ClientBase<MonitorApp.ScreenService.IScreenService>, MonitorApp.ScreenService.IScreenService {
        
        public ScreenServiceClient() {
        }
        
        public ScreenServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ScreenServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScreenServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScreenServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void TakeScreen(byte[] screen, System.DateTime time, int mouseX, int mouseY) {
            base.Channel.TakeScreen(screen, time, mouseX, mouseY);
        }
        
        public System.Threading.Tasks.Task TakeScreenAsync(byte[] screen, System.DateTime time, int mouseX, int mouseY) {
            return base.Channel.TakeScreenAsync(screen, time, mouseX, mouseY);
        }
    }
}
